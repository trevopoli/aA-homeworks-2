{"version":3,"sources":["./frontend/api_util.js","./frontend/follow_toggle.js","./frontend/infinite_tweets.js","./frontend/tweet_compose.js","./frontend/users_search.js","webpack/bootstrap","./frontend/twitter.js"],"names":[],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,2BAA2B,GAAG;AAC9B;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,yB;;;;;;;;;;AC1CA,gBAAgB,mBAAO,CAAC,0CAAY;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA,8B;;;;;;;;;;ACzDA,gBAAgB,mBAAO,CAAC,0CAAY;;AAEpC;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,gBAAgB,KAAK,sBAAsB;AAC7E;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD,mBAAmB;AACnB;AACA;;AAEA,iBAAiB,cAAc;;AAE/B;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;;AAEA,gC;;;;;;;;;;AClFA,gBAAgB,mBAAO,CAAC,0CAAY;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,qCAAqC,UAAU;AAC/C,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qC;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,QAAQ,IAAI,cAAc;AAC5D;;AAEA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,8B;;;;;;;;;;AClFA,gBAAgB,mBAAO,CAAC,0CAAY;AACpC,qBAAqB,mBAAO,CAAC,oDAAiB;;;AAG9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;;AAEA,uBAAuB,kBAAkB;AACzC;;AAEA;AACA,uBAAuB,cAAc;AACrC,+BAA+B,QAAQ;;AAEvC;AACA;AACA;;AAEA;AACA,6CAA6C,QAAQ;AACrD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,6B;;;;;;UCjDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,qBAAqB,mBAAO,CAAC,oDAAiB;AAC9C,oBAAoB,mBAAO,CAAC,kDAAgB;AAC5C,qBAAqB,mBAAO,CAAC,oDAAiB;AAC9C,uBAAuB,mBAAO,CAAC,wDAAmB;;AAElD;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,CAAC,E","file":"bundle.js","sourcesContent":["const APIUtil = {\n\n    followUser: id => APIUtil.changeFollowStatus(id, 'POST'),\n\n    unfollowUser: id => APIUtil.changeFollowStatus(id, 'DELETE'),\n\n    changeFollowStatus: (id, method) => (\n        $.ajax({\n            type: method,\n            url: `/users/${id}/follow`,\n            dataType: 'json'\n        })\n    ),\n\n    searchUsers: query => (\n        $.ajax({\n            type: 'GET',\n            url: '/users/search',\n            dataType: 'json',\n            data: {query}\n        })\n    ),\n\n    createTweet: data => (\n        $.ajax({\n            type: 'POST',\n            url: '/tweets',\n            dataType: 'json',\n            data: data\n        })\n    ),\n\n    fetchTweets: data => (\n        $.ajax({\n            type: 'GET',\n            url: '/feed',\n            dataType: 'json',\n            data: data\n        })\n    )\n};\n\nmodule.exports = APIUtil;","const APIUtil = require('./api_util');\n\nclass FollowToggle {\n    constructor(el) {\n        this.$el = $(el);\n        this.userId = this.$el.data('user-id');\n        this.followState = this.$el.data('initial-follow-state');\n        this.render();\n        this.handleClick();\n    }\n\n    render() {\n        switch (this.followState) {\n            case 'followed':\n                this.$el.prop('disabled', false);\n                this.$el.text(\"Unfollow!\");\n                break;\n            case 'unfollowed':\n                this.$el.prop('disabled', false);\n                this.$el.text(\"Follow!\");\n                break;\n            case 'following':\n                this.$el.prop('disabled', true);\n                this.$el.text(\"Following...\");\n                break;\n            case 'unfollowing':\n                this.$el.prop('disabled', true);\n                this.$el.text(\"Unfollowing...\");\n                break;\n        }\n    };\n\n    handleClick() {\n        this.$el.on(\"click\", event => {\n            const followToggle = this;\n\n            event.preventDefault();\n\n            if (this.followState === \"unfollowed\"){\n                this.followState = \"following\";\n                this.render();\n                APIUtil.followUser(followToggle.userId).then(() => {\n                    followToggle.followState = \"followed\";\n                    followToggle.render();\n                });\n            } else if (this.followState === \"followed\"){\n                this.followState = \"unfollowing\";\n                this.render();\n                APIUtil.unfollowUser(followToggle.userId).then(() => {\n                    followToggle.followState = \"unfollowed\";\n                    followToggle.render();\n                });\n            }\n        });\n    }\n}\n\nmodule.exports = FollowToggle;","const APIUtil = require('./api_util');\n\nclass InfiniteTweets {\n    constructor(el) {\n        this.$el = $(el);\n        this.lastCreatedAt = null;\n\n        this.$el.on(\"click\", \".fetch-more\", event => {\n            this.fetchTweets(event);\n        });\n\n        this.$el.on('insert-tweet', event => {\n            this.insertTweet(event);\n        });\n    }\n\n    fetchTweets(event) {\n        event.preventDefault();\n\n        const infiniteTweets = this;\n        const data = {};\n        if (this.lastCreatedAt) {\n            data.max_created_at = this.lastCreatedAt\n        };\n\n        APIUtil.fetchTweets(data).then((data) => {\n            console.log(data);\n\n            infiniteTweets.insertTweets(data);\n\n            if (data.length < 20) {\n                infiniteTweets.$el\n                    .find('.fetch-more')\n                    .replaceWith('<b>No more tweets!</b>');\n            }\n\n            if (data.length > 0) {\n                infiniteTweets.lastCreatedAt = data[data.length - 1].created_at;\n            }\n\n        });\n    }\n\n    insertTweet(event, data) {\n        this.$el.find('ul.tweets').prepend(this.tweetElement(data));\n\n        if (!this.lastCreatedAt) {\n            this.lastCreatedAt = data.created_at;\n        }\n    }\n\n    insertTweets(data) {\n        console.log(data.map(this.tweetElement));\n        this.$el.find('ul.tweets').append(data.map(this.tweetElement));\n    }\n\n    tweetElement(tweet) {\n        const mentions = tweet.mentions.map(mention =>\n            `<li class='tweetee'>\n                <a href='/users/${mention.user.id}'>@${mention.user.username}</a>\n            </li>`)\n            .join('');\n\n        const elementString = `\n        <div class='tweet'>\n            <h3 class='tweeter'>\n                <a href='/users/${tweet.user.id}'>\n                @${tweet.user.username}\n            </a>\n            </h3>\n      \n            <p>${tweet.content}</p>\n      \n            <ul>Mentions\n                ${mentions}\n            </ul>\n        </div>`\n\n        return $(elementString);\n    }\n}\n\nmodule.exports = InfiniteTweets;","const APIUtil = require('./api_util');\n\nclass TweetCompose {\n    constructor(el) {\n        this.$el = $(el);\n        this.$mentionedUsersDiv = this.$el.find('.mentioned-users');\n        $(\".chars-left\").text(`140 characters remaining.`);\n        this.addHandlers();\n    }\n\n    addHandlers() {\n        this.$el.on(\"submit\", (event) => {\n            event.preventDefault();\n            this.submit();\n        });\n\n        const $textArea = this.$el.find(\"textarea\")\n        $textArea.on(\"input\", (event) => {\n            let charsLeft = 140 - $textArea.val().length;\n            $(\".chars-left\").text(`${charsLeft} characters remaining.`);\n        });\n\n        this.$el.find('.add-mentioned-user').on(\n            'click', this.addMentionedUser.bind(this));\n\n        this.$mentionedUsersDiv.on(\n            'click', '.remove-mentioned-user', this.removeMentionedUser.bind(this));\n    }\n\n    addMentionedUser(event) {\n        event.preventDefault();\n\n        this.$mentionedUsersDiv.append(this.newUserSelect());\n    }\n\n    submit (){\n        const newTweetData = this.$el.serializeJSON();\n        $(\":input\").attr(\"disabled\", true);\n\n        APIUtil.createTweet(newTweetData).then((response) => {\n            // console.log(response);     \n            this.handleSuccess(response);\n        });\n    }\n\n    handleSuccess(response) {\n        this.clearInput();\n        $(\":input\").attr(\"disabled\", false);\n        \n        let $li = $(\"<li></li>\").text(JSON.stringify(response.content));\n        $(this.$el.data(\"tweets-ul\")).prepend($li);\n    }\n\n    clearInput() {\n        this.$el.find(\"textarea, select\").val(\"\");\n    }\n\n    newUserSelect() {\n        const userOptions = window.users\n            .map(user =>\n                `<option value='${user.id}'>${user.username}</option>`)\n            .join('');\n\n        const html = `\n      <div class=\"tweet-compose-select-mention\">\n        <select name='tweet[mentioned_user_ids][]'>\n          ${userOptions}\n        </select>\n\n        <button class='remove-mentioned-user'>Remove</button>\n      </div>`;\n\n        return $(html);\n    }\n\n    removeMentionedUser(event) {\n        event.preventDefault();\n        $(event.currentTarget).parent().remove();\n    }\n\n}\n\nmodule.exports = TweetCompose;","const APIUtil = require(\"./api_util\");\nconst FollowToggle = require('./follow_toggle');\n\n\nclass UsersSearch {\n    constructor (el) {\n        this.$el = $(el);\n        this.$input = this.$el.find('input[name=username]');\n        this.$ul = this.$el.find(\"ul.users\");\n        this.handleInput();\n    }\n\n    handleInput() {\n        const userSearch = this;\n\n        this.$el.on(\"input\", function () {\n            console.log(userSearch.$input.val());\n            APIUtil.searchUsers(userSearch.$input.val()).then((users)=>{\n                userSearch.renderResults(users);\n            });\n        });\n    }\n\n    renderResults(users) {\n        this.$ul.empty();\n\n        for (let i = 0; i < users.length; i++) {\n            const user = users[i];\n\n            let $a = $('<a></a>');\n            $a.text(`${user.username}`);\n            $a.attr('href', `${user.id}`);\n\n            let $li = $('<li></li>');\n            $li.addClass(\"user\");\n            $li.append($a);\n\n            let $followButton = $('<button></button');\n            $followButton.data('user-id', `${user.id}`);\n            $followButton.data('initial-follow-state', user.followed ? 'followed' : 'unfollowed');\n            new FollowToggle($followButton);\n\n            $li.append($followButton);\n\n            this.$ul.append($li);\n        }\n    }\n}\n\nmodule.exports = UsersSearch;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const FollowToggle = require('./follow_toggle');\nconst UsersSearch = require('./users_search');\nconst TweetCompose = require('./tweet_compose');\nconst InfiniteTweets = require('./infinite_tweets');\n\n$(function () {\n\n    const $followButtons = $('.follow-toggle');\n    $followButtons.each( function (idx, el) {\n        new FollowToggle(el);\n    });\n\n    const $usersSearch = $('.users-search');\n    $usersSearch.each( function (idx, el) {\n        new UsersSearch(el);\n    });\n\n    const $tweetCompose = $('.tweet-compose');\n    $tweetCompose.each(function (idx, el) {\n        new TweetCompose(el);\n    });\n\n    const $infiniteTweets = $('.infinite-tweets');\n    $infiniteTweets.each(function (idx, el) {\n        new InfiniteTweets(el);\n    });\n});"],"sourceRoot":""}